// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PROVEEDOR
  ADMINISTRADOR
  CLIENTE
}

enum EstadoPedido {
  PENDIENTE
  ENVIADO
  ENTREGADO
  CANCELADO
}

model User {
  id          String   @id @default(uuid())
  nombre      String
  apellido    String
  telefono    String
  direccion   String
  dni         String   @unique
  correo      String   @unique
  contrasenia String
  role        Role
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productos Producto[]
  pedidos   Pedido[]
}

model TipoBebida {
  id        Int        @id @default(autoincrement())
  nombre    String
  productos Producto[]
}

model TamanioEnvase {
  id          Int        @id @default(autoincrement())
  descripcion String
  productos   Producto[]
}

model Marca {
  id        Int        @id @default(autoincrement())
  nombre    String
  productos Producto[]
}

model Producto {
  id          Int     @id @default(autoincrement())
  nombre      String
  descripcion String?
  precio      Float
  stock       Int

  proveedor   User   @relation(fields: [proveedorId], references: [id])
  proveedorId String

  tipoBebida   TipoBebida @relation(fields: [tipoBebidaId], references: [id])
  tipoBebidaId Int

  tamanioEnvase   TamanioEnvase @relation(fields: [tamanioEnvaseId], references: [id])
  tamanioEnvaseId Int

  marca   Marca @relation(fields: [marcaId], references: [id])
  marcaId Int

  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt

  detalles DetallePedido[]
}

model Pedido {
  id        Int             @id @default(autoincrement())
  cliente   User            @relation(fields: [clienteId], references: [id])
  clienteId String
  total     Float
  estado    EstadoPedido
  creadoEn  DateTime        @default(now())
  detalles  DetallePedido[]
}

model DetallePedido {
  id Int @id @default(autoincrement())

  pedido   Pedido @relation(fields: [pedidoId], references: [id])
  pedidoId Int

  producto   Producto @relation(fields: [productoId], references: [id])
  productoId Int

  cantidad Int
  subtotal Float
}
